services:
  mongo:
    # Use latest mongo version (default) or specific version (ex. mongo:4.4)!
    image: mongo:latest

    # Name your container anything you want, or just leave it as "mongo"!
    container_name: mongo

    # You don't have to map MongoDB to 27017, you can define any unused port 0 to 65535! (But 27017 is still ok!)
    ports:
      - 'YOUR_DESIRED_EXTERNAL_PORT:27017'

    # On the left, define the volume where you want to store the MongoDB data. Leave the right alone...
    volumes:
      - /mnt/mongo:/data/db

    # Always restart the container if it stops! If it's manually stopped, it's restarted only when Docker daemon restarts or the container itself is manually restarted. Other options are "no", "on-failure", and "unless-stopped".
    restart: always

    # Make sure this network is the same as the one defined at the very bottom of this file (default: jackson-network)!
    networks:
      - jackson-network

  redis:
    # Use latest redis version (default) or specific version (ex. redis:7.4.6)!
    image: redis:latest

    # Name your container anything you want, or just leave it as "redis"!
    container_name: redis

    # You don't have to map Redis to 6379, you can define any unused port 0 to 65535! (But 6379 is still ok!)
    ports:
      - 'YOUR_DESIRED_EXTERNAL_PORT:6379'

    # On the left, define the volume where you want to store the Redis data. Leave the right alone...
    volumes:
      - /mnt/redis:/data

    # Always restart the container if it stops! If it's manually stopped, it's restarted only when Docker daemon restarts or the container itself is manually restarted. Other options are "no", "on-failure", and "unless-stopped".
    restart: always

    # Make sure this network is the same as the one defined at the very bottom of this file (default: jackson-network)!
    networks:
      - jackson-network

  jackson-load-balancer:
    # Use latest node version (default) or specific version (ex. node:21)!
    image: node:latest

    # This docker-compose.yml file that you are currently in should be in the same directory as the jackson-load-balancer (default). So, when Docker attempts to build an image for this service, it should use my project instead of some other random files!
    build: .

    # Name your container anything you want (ex. "jackson-is-awesome"), or just leave it as "jackson-load-balancer"!
    container_name: jackson-load-balancer

    # Keep this as is or you will have to change several other references to the app directory.
    working_dir: /app

    # Configure all your environment variables below.
    environment:
      # This can be PRODUCTION, DEVELOPMENT, or TESTING
      - NODE_ENV=PRODUCTION

        # Run the Node.js service on port 5555. NOTE: Do not change the port here.
      - PORT=5555

        # Reference the MongoDB container "mongo" within the Docker network. Name your database anything (after mongo:27017/)! NOTE: Do not change the port here. Instead, go up and change the external port if you want in the mongo configuration.
      - MONGODB_URL=mongodb://mongo:27017/jackson-load-balancer

        # Reference the Redis container "redis" within the Docker network.
      - REDIS_HOST=redis

        # Connect to Redis internally on port 6379. NOTE: Do not change the port here.
      - REDIS_PORT=6379

      # JWT Docs: https://www.passportjs.org/packages/passport-jwt/
      - JWT_SECRET=YOUR_SUPER_SECRET_JWT_STRING_MAKE_THIS_SUPER_LONG
      - JWT_ACCESS_EXPIRATION_MINUTES=5
      - JWT_REFRESH_EXPIRATION_DAYS=365
      - JWT_RESET_PASSWORD_EXPIRATION_MINUTES=5
      - JWT_VERIFY_EMAIL_EXPIRATION_MINUTES=5

      # SMTP Docs: https://nodemailer.com/
      - SMTP_HOST=box.pacificgyre.net
      - SMTP_PORT=587
      - SMTP_USERNAME=youremail@yourdomain.com
      - SMTP_PASSWORD=YOUR_PASSWORD
      - EMAIL_FROM=youremail@yourdomain.com
      - EMAIL_TO=youremail@yourdomain.com

      # Define a comma separated list for the first set of URLs you want in your load balancer. Traffic will be evenly distributed between all endpoints.
      - INITIAL_API_POOL_URLS=https://github.com/jacksonmccluskey,https://github.com/jacksonmccluskey

      # Define the exact path after the URL that will return a status 200 response after an HTTP/HTTPS GET request
      - INITIAL_API_HEALTH_CHECK_ROUTE=/health/check/route

      # This is the directory inside the docker container. Map it to a volume on your host machine in the "volumes" configuration below.
      - LOG_FILE_DIRECTORY_NAME=/app/logs

    # You don't have to map jackson-load-balancer to 5555, you can define any unused port 0 to 65535! (But 5555 is still ok!) When you call the load balancer, you will reference http://localhost:YOUR_DESIRED_EXTERNAL_PORT (default: http://localhost:5555)
    ports:
      - 'YOUR_DESIRED_EXTERNAL_PORT:5555'

    # Don't change this unless you write a better package to run a Node.js service in TypeScript!
    command: ['npm', 'run', 'start']

    # jackson-load-balancer will map to its current directory on your host machine. Logs will be written to the "/mnt/jackson" directory or any other volume you want. NOTE: Do not change /app/logs to anythings else unless you change the environment value for LOG_FILE_DIRECTORY_NAME.
    volumes:
      - .:/app
      - /mnt/jackson:/app/logs

    # Always restart the container if it stops! If it's manually stopped, it's restarted only when Docker daemon restarts or the container itself is manually restarted. Other options are "no", "on-failure", and "unless-stopped".
    restart: always

    # Make sure this network is the same as the one defined at the very bottom of this file (default: jackson-network)!
    networks:
      - jackson-network

networks:
  jackson-network:
    driver: bridge
